---
# 1) User/Group and base dirs
- name: Ensure gvm system user and group exist
  user:
    name: gvm
    system: yes
    create_home: no
    shell: /usr/sbin/nologin
    groups: sudo
    append: yes

- name: Add current user to gvm group
  user:
    name: "{{ ansible_user | default(lookup('env','USER')) }}"
    groups: gvm
    append: yes
- name: Ensure /usr/local/sbin is in PATH globally
  lineinfile:
    path: /etc/profile
    line: 'export PATH="$PATH:/usr/local/sbin"'
    insertafter: EOF
- name: Create build/source/install directories
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ source_dir }}"
    - "{{ build_dir }}"
    - "{{ install_dir }}"

# 2) Common build deps + GPG
- name: Install common build prerequisites
  apt:
    update_cache: yes
    name:
      - build-essential
      - curl
      - cmake
      - pkg-config
      - python3
      - python3-pip
      - gnupg
      - autoconf
      - libtool
      - make
      - gcc
      - libssl-dev
      - zlib1g-dev
      - libnghttp2-dev
      - libidn2-0-dev
      - libpsl-dev
      - librtmp-dev
    state: present
- name: Build and install latest libcurl from source
  shell: |
    set -e
    cd /usr/local/src || mkdir -p /usr/local/src && cd /usr/local/src
    curl -sLO https://curl.se/download/curl-8.10.1.tar.gz
    tar -xzf curl-8.10.1.tar.gz
    cd curl-8.10.1
    ./configure --with-ssl --enable-ipv6 --enable-unix-sockets --with-nghttp2 --prefix=/usr/local
    make -j$(nproc)
    make install
    ldconfig
    pkg-config --modversion libcurl
  args:
    executable: /bin/bash

- name: Download Greenbone Community Signing key
  get_url:
    url: "{{ greenbone_signing_key_url }}"
    dest: "/tmp/GBCommunitySigningKey.asc"
    mode: "0644"

- name: Import Greenbone signing key
  shell: "gpg --import /tmp/GBCommunitySigningKey.asc"
  args: { executable: /bin/bash }

- name: Mark Greenbone key as fully trusted
  shell: "echo '{{ greenbone_signing_key_fpr_trust }}' | gpg --import-ownertrust"
  args: { executable: /bin/bash }

# 3) Build core libs first: gvm-libs -> pg-gvm -> gvmd
- name: Install gvm-libs dependencies
  apt:
    name:
      - libcjson-dev
      - libcurl4-gnutls-dev
      - libgcrypt-dev
      - libglib2.0-dev
      - libgnutls28-dev
      - libgpgme-dev
      - libgpg-error-dev
      - libassuan-dev
      - libhiredis-dev
      - libnet1-dev
      - libpaho-mqtt-dev
      - libpcap-dev
      - libssh-dev
      - libxml2-dev
      - uuid-dev
    state: present

- name: Download + verify gvm-libs
  shell: |
    set -e
    curl -f -L https://github.com/greenbone/gvm-libs/archive/refs/tags/v{{ gvm_libs_version }}.tar.gz -o {{ source_dir }}/gvm-libs-{{ gvm_libs_version }}.tar.gz
    curl -f -L https://github.com/greenbone/gvm-libs/releases/download/v{{ gvm_libs_version }}/gvm-libs-{{ gvm_libs_version }}.tar.gz.asc -o {{ source_dir }}/gvm-libs-{{ gvm_libs_version }}.tar.gz.asc
    gpg --verify {{ source_dir }}/gvm-libs-{{ gvm_libs_version }}.tar.gz.asc {{ source_dir }}/gvm-libs-{{ gvm_libs_version }}.tar.gz
    tar -C {{ source_dir }} -xvzf {{ source_dir }}/gvm-libs-{{ gvm_libs_version }}.tar.gz
  args: { executable: /bin/bash }

- name: Build & install gvm-libs
  shell: |
    set -e
    mkdir -p {{ build_dir }}/gvm-libs
    cmake -S {{ source_dir }}/gvm-libs-{{ gvm_libs_version }} -B {{ build_dir }}/gvm-libs \
      -DCMAKE_INSTALL_PREFIX={{ install_prefix }} \
      -DCMAKE_BUILD_TYPE=Release \
      -DSYSCONFDIR=/etc -DLOCALSTATEDIR=/var
    cmake --build {{ build_dir }}/gvm-libs -j$(nproc)
    mkdir -p {{ install_dir }}/gvm-libs && cd {{ build_dir }}/gvm-libs
    make DESTDIR={{ install_dir }}/gvm-libs install
    cp -rv {{ install_dir }}/gvm-libs/* /
  args: { executable: /bin/bash }

- name: Install gvmd dependencies
  apt:
    name:
      - libbsd-dev
      - libcjson-dev
      - libglib2.0-dev
      - libgnutls28-dev
      - libgpgme-dev
      - libical-dev
      - libpq-dev
      - postgresql-server-dev-all
      - rsync
      - xsltproc
    state: present

- name: Download + verify gvmd
  shell: |
    set -e
    curl -f -L https://github.com/greenbone/gvmd/archive/refs/tags/v{{ gvmd_version }}.tar.gz -o {{ source_dir }}/gvmd-{{ gvmd_version }}.tar.gz
    curl -f -L https://github.com/greenbone/gvmd/releases/download/v{{ gvmd_version }}/gvmd-{{ gvmd_version }}.tar.gz.asc -o {{ source_dir }}/gvmd-{{ gvmd_version }}.tar.gz.asc
    gpg --verify {{ source_dir }}/gvmd-{{ gvmd_version }}.tar.gz.asc {{ source_dir }}/gvmd-{{ gvmd_version }}.tar.gz
    tar -C {{ source_dir }} -xvzf {{ source_dir }}/gvmd-{{ gvmd_version }}.tar.gz
  args: { executable: /bin/bash }

- name: Build & install gvmd
  shell: |
    set -e
    mkdir -p {{ build_dir }}/gvmd
    cmake -S {{ source_dir }}/gvmd-{{ gvmd_version }} -B {{ build_dir }}/gvmd       -DCMAKE_INSTALL_PREFIX={{ install_prefix }} -DCMAKE_BUILD_TYPE=Release       -DLOCALSTATEDIR=/var -DSYSCONFDIR=/etc -DGVM_DATA_DIR=/var -DGVM_LOG_DIR=/var/log/gvm       -DGVMD_RUN_DIR=/run/gvmd -DOPENVAS_DEFAULT_SOCKET=/run/ospd/ospd-openvas.sock       -DGVM_FEED_LOCK_PATH=/var/lib/gvm/feed-update.lock -DLOGROTATE_DIR=/etc/logrotate.d
    cmake --build {{ build_dir }}/gvmd -j$(nproc)
    mkdir -p {{ install_dir }}/gvmd && cd {{ build_dir }}/gvmd
    make DESTDIR={{ install_dir }}/gvmd install
    cp -rv {{ install_dir }}/gvmd/* /
  args: { executable: /bin/bash }

- name: Install pg-gvm dependencies
  apt:
    name:
      - libglib2.0-dev
      - libical-dev
      - postgresql-server-dev-all
    state: present

- name: Download + verify pg-gvm
  shell: |
    set -e
    curl -f -L https://github.com/greenbone/pg-gvm/archive/refs/tags/v{{ pg_gvm_version }}.tar.gz -o {{ source_dir }}/pg-gvm-{{ pg_gvm_version }}.tar.gz
    curl -f -L https://github.com/greenbone/pg-gvm/releases/download/v{{ pg_gvm_version }}/pg-gvm-{{ pg_gvm_version }}.tar.gz.asc -o {{ source_dir }}/pg-gvm-{{ pg_gvm_version }}.tar.gz.asc
    gpg --verify {{ source_dir }}/pg-gvm-{{ pg_gvm_version }}.tar.gz.asc {{ source_dir }}/pg-gvm-{{ pg_gvm_version }}.tar.gz
    tar -C {{ source_dir }} -xvzf {{ source_dir }}/pg-gvm-{{ pg_gvm_version }}.tar.gz
  args: { executable: /bin/bash }

- name: Build & install pg-gvm
  shell: |
    set -e
    mkdir -p {{ build_dir }}/pg-gvm
    cmake -S {{ source_dir }}/pg-gvm-{{ pg_gvm_version }} -B {{ build_dir }}/pg-gvm -DCMAKE_BUILD_TYPE=Release
    cmake --build {{ build_dir }}/pg-gvm -j$(nproc)
    mkdir -p {{ install_dir }}/pg-gvm && cd {{ build_dir }}/pg-gvm
    make DESTDIR={{ install_dir }}/pg-gvm install
    cp -rv {{ install_dir }}/pg-gvm/* /
  args: { executable: /bin/bash }

# 5) Continue building remaining components
# GSA (prebuilt dist)
- name: Download + verify GSA dist
  shell: |
    set -e
    curl -f -L https://github.com/greenbone/gsa/releases/download/v{{ gsa_version }}/gsa-dist-{{ gsa_version }}.tar.gz -o {{ source_dir }}/gsa-{{ gsa_version }}.tar.gz
    curl -f -L https://github.com/greenbone/gsa/releases/download/v{{ gsa_version }}/gsa-dist-{{ gsa_version }}.tar.gz.asc -o {{ source_dir }}/gsa-{{ gsa_version }}.tar.gz.asc
    gpg --verify {{ source_dir }}/gsa-{{ gsa_version }}.tar.gz.asc {{ source_dir }}/gsa-{{ gsa_version }}.tar.gz
    mkdir -p {{ source_dir }}/gsa-{{ gsa_version }}
    tar -C {{ source_dir }}/gsa-{{ gsa_version }} -xvzf {{ source_dir }}/gsa-{{ gsa_version }}.tar.gz
  args: { executable: /bin/bash }

- name: Install GSA web files
  shell: |
    set -e
    mkdir -p {{ install_prefix }}/share/gvm/gsad/web/
    cp -rv {{ source_dir }}/gsa-{{ gsa_version }}/* {{ install_prefix }}/share/gvm/gsad/web/
  args: { executable: /bin/bash }

# GSAD (server)
- name: Install gsad deps
  apt:
    name:
      - libbrotli-dev
      - libglib2.0-dev
      - libgnutls28-dev
      - libmicrohttpd-dev
      - libxml2-dev
    state: present

- name: Download + verify gsad
  shell: |
    set -e
    curl -f -L https://github.com/greenbone/gsad/archive/refs/tags/v{{ gsad_version }}.tar.gz -o {{ source_dir }}/gsad-{{ gsad_version }}.tar.gz
    curl -f -L https://github.com/greenbone/gsad/releases/download/v{{ gsad_version }}/gsad-{{ gsad_version }}.tar.gz.asc -o {{ source_dir }}/gsad-{{ gsad_version }}.tar.gz.asc
    gpg --verify {{ source_dir }}/gsad-{{ gsad_version }}.tar.gz.asc {{ source_dir }}/gsad-{{ gsad_version }}.tar.gz
    tar -C {{ source_dir }} -xvzf {{ source_dir }}/gsad-{{ gsad_version }}.tar.gz
  args: { executable: /bin/bash }

- name: Build & install gsad
  shell: |
    set -e
    mkdir -p {{ build_dir }}/gsad
    cmake -S {{ source_dir }}/gsad-{{ gsad_version }} -B {{ build_dir }}/gsad -DCMAKE_INSTALL_PREFIX={{ install_prefix }} -DCMAKE_BUILD_TYPE=Release -DSYSCONFDIR=/etc -DLOCALSTATEDIR=/var -DGVMD_RUN_DIR=/run/gvmd -DGSAD_RUN_DIR=/run/gsad -DGVM_LOG_DIR=/var/log/gvm -DLOGROTATE_DIR=/etc/logrotate.d
    cmake --build {{ build_dir }}/gsad -j$(nproc)
    mkdir -p {{ install_dir }}/gsad && cd {{ build_dir }}/gsad
    make DESTDIR={{ install_dir }}/gsad install
    cp -rv {{ install_dir }}/gsad/* /
  args: { executable: /bin/bash }

# openvas-smb
- name: Install openvas-smb deps
  apt:
    name:
      - gcc-mingw-w64
      - libgnutls28-dev
      - libglib2.0-dev
      - libpopt-dev
      - libunistring-dev
      - heimdal-multidev
      - perl-base
    state: present

- name: Download + verify openvas-smb
  shell: |
    set -e
    curl -f -L https://github.com/greenbone/openvas-smb/archive/refs/tags/v{{ openvas_smb_version }}.tar.gz -o {{ source_dir }}/openvas-smb-{{ openvas_smb_version }}.tar.gz
    curl -f -L https://github.com/greenbone/openvas-smb/releases/download/v{{ openvas_smb_version }}/openvas-smb-v{{ openvas_smb_version }}.tar.gz.asc -o {{ source_dir }}/openvas-smb-{{ openvas_smb_version }}.tar.gz.asc
    gpg --verify {{ source_dir }}/openvas-smb-{{ openvas_smb_version }}.tar.gz.asc {{ source_dir }}/openvas-smb-{{ openvas_smb_version }}.tar.gz
    tar -C {{ source_dir }} -xvzf {{ source_dir }}/openvas-smb-{{ openvas_smb_version }}.tar.gz
  args: { executable: /bin/bash }

- name: Build & install openvas-smb
  shell: |
    set -e
    mkdir -p {{ build_dir }}/openvas-smb
    cmake -S {{ source_dir }}/openvas-smb-{{ openvas_smb_version }} -B {{ build_dir }}/openvas-smb -DCMAKE_INSTALL_PREFIX={{ install_prefix }} -DCMAKE_BUILD_TYPE=Release
    cmake --build {{ build_dir }}/openvas-smb -j$(nproc)
    mkdir -p {{ install_dir }}/openvas-smb && cd {{ build_dir }}/openvas-smb
    make DESTDIR={{ install_dir }}/openvas-smb install
    cp -rv {{ install_dir }}/openvas-smb/* /
  args: { executable: /bin/bash }

# openvas-scanner
- name: Install openvas-scanner deps
  apt:
    name:
      - bison
      - libglib2.0-dev
      - libgnutls28-dev
      - libgcrypt20-dev
      - libpcap-dev
      - libgpgme-dev
      - libksba-dev
      - rsync
      - nmap
      - libjson-glib-dev
      - libcurl4-gnutls-dev
      - libbsd-dev
      - krb5-multidev
      - python3-impacket
      - libsnmp-dev
    state: present

- name: Download + verify openvas-scanner
  shell: |
    set -e
    curl -f -L https://github.com/greenbone/openvas-scanner/archive/refs/tags/v{{ openvas_scanner_version }}.tar.gz -o {{ source_dir }}/openvas-scanner-{{ openvas_scanner_version }}.tar.gz
    curl -f -L https://github.com/greenbone/openvas-scanner/releases/download/v{{ openvas_scanner_version }}/openvas-scanner-v{{ openvas_scanner_version }}.tar.gz.asc -o {{ source_dir }}/openvas-scanner-{{ openvas_scanner_version }}.tar.gz.asc
    gpg --verify {{ source_dir }}/openvas-scanner-{{ openvas_scanner_version }}.tar.gz.asc {{ source_dir }}/openvas-scanner-{{ openvas_scanner_version }}.tar.gz
    tar -C {{ source_dir }} -xvzf {{ source_dir }}/openvas-scanner-{{ openvas_scanner_version }}.tar.gz
  args: { executable: /bin/bash }

- name: Build & install openvas-scanner
  shell: |
    set -e
    mkdir -p {{ build_dir }}/openvas-scanner
    cmake -S {{ source_dir }}/openvas-scanner-{{ openvas_scanner_version }} -B {{ build_dir }}/openvas-scanner -DCMAKE_INSTALL_PREFIX={{ install_prefix }} -DCMAKE_BUILD_TYPE=Release -DSYSCONFDIR=/etc -DLOCALSTATEDIR=/var -DOPENVAS_FEED_LOCK_PATH=/var/lib/openvas/feed-update.lock -DOPENVAS_RUN_DIR=/run/ospd
    cmake --build {{ build_dir }}/openvas-scanner -j$(nproc)
    mkdir -p {{ install_dir }}/openvas-scanner && cd {{ build_dir }}/openvas-scanner
    make DESTDIR={{ install_dir }}/openvas-scanner install
    cp -rv {{ install_dir }}/openvas-scanner/* /
    printf "table_driven_lsc = yes\n" | tee /etc/openvas/openvas.conf
    printf "openvasd_server = http://127.0.0.1:3000\n" | tee -a /etc/openvas/openvas.conf
  args: { executable: /bin/bash }

  # ospd-openvas (pip)
- name: Install ospd-openvas Python deps
  apt:
    name:
      - python3
      - python3-pip
      - python3-setuptools
      - python3-packaging
      - python3-wrapt
      - python3-cffi
      - python3-psutil
      - python3-lxml
      - python3-defusedxml
      - python3-paramiko
      - python3-redis
      - python3-gnupg
      - python3-paho-mqtt
    state: present

- name: Download + verify ospd-openvas
  shell: |
    set -e
    curl -f -L https://github.com/greenbone/ospd-openvas/archive/refs/tags/v{{ ospd_openvas_version }}.tar.gz -o {{ source_dir }}/ospd-openvas-{{ ospd_openvas_version }}.tar.gz
    curl -f -L https://github.com/greenbone/ospd-openvas/releases/download/v{{ ospd_openvas_version }}/ospd-openvas-v{{ ospd_openvas_version }}.tar.gz.asc -o {{ source_dir }}/ospd-openvas-{{ ospd_openvas_version }}.tar.gz.asc
    gpg --verify {{ source_dir }}/ospd-openvas-{{ ospd_openvas_version }}.tar.gz.asc {{ source_dir }}/ospd-openvas-{{ ospd_openvas_version }}.tar.gz
    tar -C {{ source_dir }} -xvzf {{ source_dir }}/ospd-openvas-{{ ospd_openvas_version }}.tar.gz
  args: { executable: /bin/bash }

- name: Install ospd-openvas via pip (staged)
  shell: |
    set -e
    mkdir -p {{ install_dir }}/ospd-openvas
    cd {{ source_dir }}/ospd-openvas-{{ ospd_openvas_version }}
    python3 -m pip install --root={{ install_dir }}/ospd-openvas --no-warn-script-location .
    cp -rv {{ install_dir }}/ospd-openvas/* /
  args: { executable: /bin/bash }

# openvasd (rust)
- name: Ensure rustup & toolchain for openvasd
  shell: |
    set -e
    if ! command -v rustup >/dev/null 2>&1; then
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      export PATH="$HOME/.cargo/bin:$PATH"
    fi
    rustup update stable
  args: { executable: /bin/bash }

- name: Install openvasd build deps
  apt:
    name:
      - pkg-config
      - libssl-dev
    state: present

- name: Download + verify openvasd sources
  shell: |
    set -e
    curl -f -L https://github.com/greenbone/openvas-scanner/archive/refs/tags/v{{ openvas_daemon_version }}.tar.gz -o {{ source_dir }}/openvas-scanner-{{ openvas_daemon_version }}.tar.gz
    curl -f -L https://github.com/greenbone/openvas-scanner/releases/download/v{{ openvas_daemon_version }}/openvas-scanner-v{{ openvas_daemon_version }}.tar.gz.asc -o {{ source_dir }}/openvas-scanner-{{ openvas_daemon_version }}.tar.gz.asc
    gpg --verify {{ source_dir }}/openvas-scanner-{{ openvas_daemon_version }}.tar.gz.asc {{ source_dir }}/openvas-scanner-{{ openvas_daemon_version }}.tar.gz
    tar -C {{ source_dir }} -xvzf {{ source_dir }}/openvas-scanner-{{ openvas_daemon_version }}.tar.gz
  args: { executable: /bin/bash }

- name: Build openvasd and scannerctl
  shell: |
    set -e
    mkdir -p {{ install_dir }}/openvasd/usr/local/bin
    cd {{ source_dir }}/openvas-scanner-{{ openvas_daemon_version }}/rust/src/openvasd
    cargo build --release
    cd {{ source_dir }}/openvas-scanner-{{ openvas_daemon_version }}/rust/src/scannerctl
    cargo build --release
    cp -v {{ source_dir }}/openvas-scanner-{{ openvas_daemon_version }}/rust/target/release/openvasd {{ install_dir }}/openvasd/usr/local/bin/
    cp -v {{ source_dir }}/openvas-scanner-{{ openvas_daemon_version }}/rust/target/release/scannerctl {{ install_dir }}/openvasd/usr/local/bin/
    cp -rv {{ install_dir }}/openvasd/* /
  args: { executable: /bin/bash }

# greenbone-feed-sync & gvm-tools
- name: Install greenbone-feed-sync system-wide
  shell: |
    set -e
    mkdir -p {{ install_dir }}/greenbone-feed-sync
    python3 -m pip install --root={{ install_dir }}/greenbone-feed-sync --no-warn-script-location greenbone-feed-sync
    cp -rv {{ install_dir }}/greenbone-feed-sync/* /
  args: { executable: /bin/bash }
- name: Install gvm-tools build deps
  apt:
    name:
      - python3
      - python3-lxml
      - python3-packaging
      - python3-paramiko
      - python3-pip
      - python3-setuptools
      - python3-venv
    state: present
- name: Install gvm-tools (optional)
  shell: |
    set -e
    mkdir -p {{ install_dir }}/gvm-tools
    python3 -m pip install --root={{ install_dir }}/gvm-tools --no-warn-script-location gvm-tools
    cp -rv {{ install_dir }}/gvm-tools/* /
  args: { executable: /bin/bash }

# 6) System setup: Redis, dirs, sudoers, feed validation keyring
- name: Install redis-server
  apt:
    name: redis-server
    state: present

- name: Configure Redis for OpenVAS and openvas.conf
  shell: |
    set -e
    cp {{ source_dir }}/openvas-scanner-{{ openvas_scanner_version }}/config/redis-openvas.conf /etc/redis/
    chown redis:redis /etc/redis/redis-openvas.conf
    echo "db_address = /run/redis-openvas/redis.sock" | tee -a /etc/openvas/openvas.conf
  args: { executable: /bin/bash }

- name: Enable and start redis-server@openvas
  systemd:
    name: redis-server@openvas.service
    enabled: yes
    state: started

- name: Add gvm user to redis group
  user:
    name: gvm
    groups: redis
    append: yes

- name: Ensure directories/permissions
  shell: |
    set -e
    mkdir -p /var/lib/notus
    mkdir -p /run/gvmd
    chown -R gvm:gvm /var/lib/gvm /var/lib/openvas /var/lib/notus /var/log/gvm || true
    chown -R gvm:gvm /run/gvmd
    chmod -R g+srw /var/lib/gvm /var/lib/openvas /var/log/gvm || true
  args: { executable: /bin/bash }

- name: Set gvmd binary permissions (setuid/setgid)
  file:
    path: /usr/local/sbin/gvmd
    owner: gvm
    group: gvm
    mode: "06750"

- name: Prepare feed validation keyring
  shell: |
    set -e
    curl -f -L {{ greenbone_signing_key_url }} -o /tmp/GBCommunitySigningKey.asc
    export GNUPGHOME=/tmp/openvas-gnupg
    mkdir -p $GNUPGHOME
    gpg --import /tmp/GBCommunitySigningKey.asc
    echo "{{ greenbone_signing_key_fpr_trust }}" | gpg --import-ownertrust
    export OPENVAS_GNUPG_HOME=/etc/openvas/gnupg
    mkdir -p $OPENVAS_GNUPG_HOME
    cp -r /tmp/openvas-gnupg/* $OPENVAS_GNUPG_HOME/
    chown -R gvm:gvm $OPENVAS_GNUPG_HOME
  args: { executable: /bin/bash }

- name: Sudoers rule to allow openvas as root
  copy:
    dest: /etc/sudoers.d/gvm
    mode: "0440"
    content: "%gvm ALL = NOPASSWD: /usr/local/sbin/openvas"
# 4) PostgreSQL setup (then admin + Feed Import Owner immediately)
- name: Install PostgreSQL server
  apt:
    name: postgresql
    state: present

- name: Ensure PostgreSQL is running
  systemd:
    name: postgresql
    state: started
    enabled: yes

- name: Create gvm DB user and database
  shell: |
    set -e
    sudo -u postgres bash -c "
      createuser -DRS gvm || true
      createdb -O gvm gvmd || true
      psql gvmd -c \"create role dba with superuser noinherit; grant dba to gvm;\" || true
    "
  args:
    executable: /bin/bash

- name: Create admin user with provided password (admin/admin) right after DB
  shell: |
    set -e
    if /usr/local/sbin/gvmd --get-users | grep -qx "{{ gvmd_admin_user }}"; then
      exit 0
    fi
    /usr/local/sbin/gvmd --create-user={{ gvmd_admin_user }} --password='{{ gvmd_admin_password }}'
  args: { executable: /bin/bash }

- name: Set Feed Import Owner to admin user UUID
  shell: |
    set -e
    ADMIN_UUID=$(/usr/local/sbin/gvmd --get-users --verbose | awk '/^{{ gvmd_admin_user }} /{print $2}')
    /usr/local/sbin/gvmd --modify-setting 78eceaec-3385-11ea-b237-28d24461215b --value "$ADMIN_UUID"
  args: { executable: /bin/bash }
  failed_when: false
# 7) Systemd units installation
- name: Install systemd service files
  template:
    src: "{{ item.src }}"
    dest: "/etc/systemd/system/{{ item.dest }}"
    mode: "0644"
  loop:
    - { src: "ospd-openvas.service.j2", dest: "ospd-openvas.service" }
    - { src: "gvmd.service.j2", dest: "gvmd.service" }
    - { src: "gsad.service.j2", dest: "gsad.service" }
    - { src: "openvasd.service.j2", dest: "openvasd.service" }
  notify: ["daemon-reload"]

# 8) Run greenbone-feed-sync completely BEFORE starting services
- name: Run greenbone-feed-sync (initial full sync)
  command: /usr/local/bin/greenbone-feed-sync
  register: feed_sync_result
  changed_when: false
  failed_when: false

# 9) Now enable and start services so they do their own loading
- name: Enable and start OSPD, GVMD, GSAD, OPENVASD
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - ospd-openvas
    - gvmd
    - gsad
    - openvasd
# FILEBEAT
- name: Ensure dependencies are installed
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - curl
      - gnupg
    state: present
    update_cache: yes
- name: Add Elastic GPG key
  ansible.builtin.shell: |
    curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | gpg --dearmor | sudo tee /usr/share/keyrings/elastic-keyring.gpg > /dev/null
  args:
    creates: /usr/share/keyrings/elastic-keyring.gpg

- name: Add Elastic APT repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/elastic-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main"
    filename: "elastic-8.x"
    state: present
- name: Install Filebeat
  ansible.builtin.apt:
    name: filebeat
    state: present
    update_cache: yes

- name: Deploy Filebeat configuration
  ansible.builtin.template:
    src: filebeat.yml.j2
    dest: /etc/filebeat/filebeat.yml
    mode: "0644"
  notify: restart filebeat

- name: Enable and start Filebeat service
  ansible.builtin.systemd:
    name: filebeat
    enabled: yes
    state: started
