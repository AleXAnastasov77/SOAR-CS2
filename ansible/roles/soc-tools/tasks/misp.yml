---
# === Deploy MISP using the official Docker containers ===

# --- 1. Install Docker Engine + Compose dependencies ---
- name: Install Docker prerequisites
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: yes

- name: Add Docker GPG key
  ansible.builtin.shell: |
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg
  args:
    creates: /etc/apt/keyrings/docker.gpg

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    update_cache: yes

- name: Install Docker Engine and Compose plugin
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present

- name: Ensure Docker service is running
  service:
    name: docker
    state: started
    enabled: yes

# --- 2. Clone official MISP Docker repository ---
- name: Clone MISP Docker repository
  git:
    repo: "{{ misp_repo }}"
    dest: "{{ misp_path }}"
    version: "master"
    force: yes

# --- 3. Copy environment file ---
- name: Copy template.env to .env
  copy:
    src: "{{ misp_path }}/template.env"
    dest: "{{ misp_path }}/.env"
    remote_src: yes
    mode: "0644"

# --- 4. Pull all container images ---
- name: Pull MISP Docker images
  shell: docker compose pull
  args:
    chdir: "{{ misp_path }}"

# --- 5. Start the MISP containers ---
- name: Start MISP stack in detached mode
  shell: docker compose up -d
  args:
    chdir: "{{ misp_path }}"
  register: compose_up
  ignore_errors: yes

- name: Show Docker compose output (for debugging)
  debug:
    var: compose_up.stderr

# --- 6. Wait until all containers are healthy ---
- name: Wait for all MISP containers to become healthy
  shell: |
    set -e
    retries=30
    sleep_time=10
    while [ $retries -gt 0 ]; do
      unhealthy=$(docker ps --filter "name=misp-docker" --filter "health=unhealthy" --format '{{.Names}}')
      starting=$(docker ps --filter "name=misp-docker" --filter "health=starting" --format '{{.Names}}')
      if [ -z "$unhealthy" ] && [ -z "$starting" ]; then
        echo "✅ All MISP containers are healthy"
        exit 0
      fi
      echo "⏳ Waiting for containers to become healthy... (remaining: $retries)"
      sleep $sleep_time
      retries=$((retries - 1))
    done
    echo "⚠️ Some containers are still unhealthy after timeout"
    docker ps --filter "name=misp-docker"
    exit 1
  args:
    chdir: "{{ misp_path }}"
  register: health_check
  retries: 1
  delay: 10
  ignore_errors: yes

- name: Print container health summary
  shell: docker ps --filter "name=misp-docker"
  register: container_status
  changed_when: false

- name: Show container states
  debug:
    var: container_status.stdout_lines

# --- 7. Verify web interface ---
- name: Wait for MISP web interface
  uri:
    url: "http://localhost"
    status_code: 200
    return_content: no
  register: misp_http
  retries: 10
  delay: 15
  until: misp_http.status == 200

- name: Print success message
  debug:
    msg: "✅ MISP is up and reachable at http://localhost"
